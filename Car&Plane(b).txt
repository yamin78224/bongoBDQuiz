Dependency injection is another design pattern for this solution. It allows the creation of dependent objects outside of a class and provides those objects to a class through different ways.

interface IDependency
{
    void InjectDependencyCar(ICar car);
    void InjectDependencyPlane(IPlane plane);
}
 
class Vehicle: IDependency
{
    public ICar car;
    public IPlane plane;
    public void InjectDependencyCar (ICar car)
    {
        this. car = car;
    }
    public void InjectDependencyPlane (IPlane plane)
    {
        this.plane = plane;
    }
}
 



static void Main(string[] args)
{
    Vehicle vehicle = new Vehicle();
   vehicle.InjectDependencyCar (new Car());
    vehicle.InjectDependencyPlane(new Plane());
}
